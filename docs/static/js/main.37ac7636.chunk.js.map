{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","array","GifExpertApp","categories","root","document","getElementById","ReactDOM","render"],"mappings":"oNAGMA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAgBrC,OACE,sBAAMC,SATe,SAACC,GACtBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAQ,OAAKP,GAAL,mBAAoBO,OAC1CN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBiB,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,aAqB3BZ,EAAYe,UAAY,CACtBd,cAAee,IAAUC,KAAKC,YAEjBlB,Q,+BChCFmB,EAAO,uCAAG,WAAOT,GAAP,uBAAAU,EAAA,6DAEbC,EAFa,0FAE4EC,UAAUZ,GAFtF,sBAGIa,MAAMF,GAHV,cAGbG,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACzB,MAAM,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVnB,kBAcZM,GAdY,4CAAH,sDCWLO,EATK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACzB,OACI,sBAAKc,UAAU,4CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDVO,EAAU,SAAC,GAAc,IAAb5B,EAAY,EAAZA,SAAY,ECDF,SAACA,GAAa,IAAD,EAEXR,mBAAS,CAC/BwB,KAAM,GACNa,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAmBrC,OAZAC,qBAAU,WAENvB,EAAQT,GACHiC,MAAK,SAACd,GACHY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAIvB,CAAC7B,IAEI8B,EDfqBI,CAAalC,GAA/BsB,EAHgB,EAGrBN,KAAYa,EAHS,EAGTA,QAEnB,OACE,qCACE,oBAAIJ,UAAU,qCAAd,SAAoDzB,IACnD6B,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,WAAf,SAEIH,EAAOJ,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAEMA,GADCA,EAAIC,aAUvBQ,EAAQvB,UAAY,CAClBL,SAAUM,IAAU6B,MAAM3B,YAGboB,QELAQ,EAvBM,WAAK,IAAD,EAEa5C,mBAAS,CAAC,yBAFvB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAKvB,OACE,qCACE,4CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEI8C,EAAWnB,KAAI,SAAAlB,GAAQ,OACrB,cAAC,EAAD,CACEA,SAAUA,GACLA,YCbbsC,G,YAAOC,SAASC,eAAe,SAErCC,IAASC,OAAO,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.37ac7636.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes  from 'prop-types';\n\nconst AddCategory = ({setCategories})=>{\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleOnChange = (e)=>{\n    setInputValue(e.target.value);\n  }\n\n  const handleOnSubmit = (e)=>{\n    e.preventDefault();\n    if(inputValue.trim().length > 0){\n      setCategories(category => [inputValue, ...category]);\n      setInputValue('');\n    }\n  }\n\n  return(\n    <form onSubmit={handleOnSubmit}>\n      <input \n        type=\"text\"\n        value={inputValue}\n        onChange={handleOnChange}\n      />\n    </form>\n  );\n}\nAddCategory.prototype = {\n  setCategories: PropTypes.func.isRequired\n}\nexport default AddCategory;\n","export const getGifs = async (category)=>{\n\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=QtwdWz9Vnx6Ny9hnVgqeY9wc6ZJ3JrGv&q=${encodeURI(category)}&limit=10`;\n    const response = await fetch(url);\n    const {data} = await response.json();\n\n    const gifs = data.map(img=>{\n      return{\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url\n      }\n    });\n\n    return gifs;\n}","import React from 'react'\n\nconst GifGridItem = ({title, url}) => {\n    return (\n        <div className='cardImg animate__animated animate__fadeIn'>\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category})=>{\n\n\n  const {data:images,loading} = useFetchGifs(category);\n\n  return(\n    <>\n      <h3 className='animate__animated animate__flipInX'>{category}</h3>\n      {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n      <div className='cardGrid'>\n        {\n          images.map((img)=>(\n            <GifGridItem \n              key={img.id}\n              {...img}\n            />\n          ))\n        }\n      </div>\n    </>\n  );\n}\n\nGifGrid.prototype = {\n  category: PropTypes.array.isRequired\n}\n\nexport default GifGrid;\n","import {useEffect, useState} from \"react\";\nimport {getGifs} from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) =>{ \n\n    const [state, setState] = useState({ \n        data: [], \n        loading: true,\n    });\n\n    useEffect(()=>{\n\n        getGifs(category)\n            .then((img) => {\n                setState({\n                    data: img,\n                    loading: false, \n                });\n            });\n\n    },[category]);\n\n    return state;\n\n}","import React, {useState} from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = ()=>{\n\n  const [categories, setCategories] = useState(['Full metal Alchimist']);\n  \n\n  return(\n    <>\n      <h2>Gif Expert</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr/>\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid \n              category={category}\n              key={category}\n            />\n          ))\n        }\n      </ol>\n    </>\n  );\n}\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\nconst root = document.getElementById(\"root\");\n\nReactDOM.render(<GifExpertApp />, root);\n"],"sourceRoot":""}